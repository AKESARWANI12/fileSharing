const asyncHandler = require("express-async-handler");

const otpGenerator = require("otp-generator");
const User = require("../modals/userModal.js");
const generateToken = require("../config/generateToken");
const OTP = require("../modals/otp.js");
//sendOTP
const sendOTP = async (req, res) => {
  try {
    const { email } = req.body; //fetch email from request ki body
    const checkUserPresent = await User.findOne({ email }); //check if user already exist

    if (checkUserPresent) {
      //if user already exist , then return a response
      return res.status(401).json({
        success: false,
        message: "User already registered",
      });
    }

    var otp = otpGenerator.generate(6, {
      //generate otp of 6 digit number donot contain uppercase,lowercase,specialchar;
      upperCaseAlphabets: false,
      lowerCaseAlphabets: false,
      specialChars: false,
    });
    console.log("OTP generated: ", otp);

    let result = await OTP.findOne({ otp: otp }); //check unique otp or not
    while (result) {
      // if result is true so we regenerate otp;
      otp = otpGenerator.generate(6, {
        upperCaseAlphabets: false,
      });
    }
    const otpPayload = { email, otp };
    //create an entry in OTP in DB and this OTP is used in SignUp to find response;
    const otpBody = await OTP.create(otpPayload);
    console.log("OTP Body", otpBody);

    res.status(200).json({
      //return response successful
      success: true,
      message: "OTP Sent Successfully",
      otp,
    });
  } catch (error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const registerUser = asyncHandler(async (req, res) => {
  const { name, email, password, otp } = req.body;
  if (!name || !email || !password || !otp) {
    res.status(400);
    throw new Error(
      "Please Enter all the details correct,kuch galat daal rahe ho email name password me"
    );
  }
  const userExists = await User.findOne({ email }); //ye User usermodal ka hai
  if (userExists) {
    res.status(400);
    throw new Error("User already exists");
  }

  const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1); //find most recent OTP stored for the user or most recent OTP generated for user;

  if (response.length === 0) {
    //validate OTP , Lenght 0 so OTP not found
    return res.status(400).json({
      success: false,
      message: "OTP NOT Found",
    });
  } else if (otp !== response[0].otp) {
    // if otp entered by user != actual otp then PRINT Invalid OTP;
    return res.status(400).json({
      // here otp is entered by user and response[0].otp is generated by controller;
      success: false,
      message: "Invalid OTP",
    });
  }
  const user = await User.create({ name, email, password,otp });
  //ab agar registration sahe se ho gaya to send karo response niche ..aur sath me token bhi bhezdo create karke
  if (user) {
    res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      token: generateToken(user._id),
    });
  } else {
    res.status(400);
    throw new Error("Failed to create the user");
  }
});

//login ke liye backend hai
const authUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  console.log("login vala code hai ye ");

  if (user && (await user.matchPassword(password))) {
    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      pic: user.pic,
      token: generateToken(user._id),
    });
  } else {
    res.status(401);
    throw new Error("Invalid EMail or Password");
  }
});

const SearchallUsers = asyncHandler(async (req, res) => {
  const keyword = req.query.search
    ? {
        $or: [{ name: { $regex: req.query.search, $options: "i" } }],
      }
    : {};
  const users = await User.find(keyword).find({ _id: { $ne: req.user._id } });
  res.send(users);
});

const getUserList = async (req, res) => {
  try {
    const searchQuery = req.query.search_query;

    let users;
    if (!searchQuery) {
      users = await User.find();
    } else {
      users = await User.find({
        $or: [
          { username: { $regex: searchQuery, $options: "i" } },
          { first_name: { $regex: searchQuery, $options: "i" } },
          { last_name: { $regex: searchQuery, $options: "i" } },
          { email: { $regex: searchQuery, $options: "i" } },
        ],
      });
    }

    res.status(200).json(users);
  } catch (error) {
    console.error("Get user list error:", error);
    res
      .status(500)
      .json({ error: "An error occurred while fetching user list" });
  }
};

module.exports = {
  registerUser,
  authUser,
  SearchallUsers,
  getUserList,
  sendOTP,
};


